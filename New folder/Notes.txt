Day 1: (28/04/25)

1) setup environment for angular
2) learned how to create basic angular webapp in that i have used ng new <project name>
3) learned what is interpolation
4) viewed the folder structure of the angular project
5) also used ng serve to run the project
6) used ng generate component <name of component> to generate the component (short command is ng g c <name>)
7) also learned what component is and how to create it and use it in different other components
8) learned how to create custom components
9) created a simple function which will print button clicked when the button is clicked
10) learned how datatypes are defined for props and variables in typescript
11) created a counter app

Day 2: (29/04/25)

1) in morning i was having a session with Sameer sir in that session i have learned what kind of projects they have developed and also others things about the company 
2) after that he performed some sql commands and give me the overall view of the production environment like how things actually worked this was a 2 - 2.5 hours session
3) after lunch again he give me session where we have displayed data from 3 tables and join them altogether
4) after that i started learning angular in which i have learned about Events like : click event, input event, mouse enter event, mouse leave event, focus event and blur event
5) also learned how to get and set input field value and also learned what is template reference
6) learned what are different styles options available while working with angular
7) learned how to use if else in angular and created a toggle button showing text and hiding it on click

Day 3: (30/04/25)

1) in morning i was having a 2.5 hours session in which Sameer sir shows the actual working of school project and also the bugs in it
2) after lunch started with conditional statement else if and created color changer on button clicks and also based on color number entered in input text box
3) after that i learned how to use switch conditional statement
4) after that learned how to use for loop in that learned how to use track and index
5) after that i have learned about signal in angular, whats the difference between a normal property, how to update it using set and why signal are actually introduced in angular the answer is for optimization 

Day 4 : (01/05/25)

1) in morning i have learned writtable signals methods like (set and update)
2) after that learned datatypes of signals and types of signals (writtable, computed)
3) after that learned how effect is used to capture signals in that i got to know what is constructor function and how to use effect in that
4) started watching another tutorials which manager sir told me to do

Day 5 : (05/05/25)

1) watched all the overview 
2) started with the fundamentals 
3) created the home page ui of robot shop

Day 6 : (06/05/25)

1)started with the catalog page
2)leared what is ngfor directive type of structural directives used for adding multiple elements in the dom
3)created multiple category items using ng for
4)learned about click event and created filtering functionality using click and filter property
5)also learned how to handle error due to null values using safe navigation operator (?)
6)also learned *ngIf structural directives to hide and show the discount price and actual price of the robots parts based on the conditions and also learned about [hidden] to do the same
7)also learned how to use built in currency pipes in order to show the currency type
8)styling options with angular
9)learned how to use ngclass directives to apply multiple class when thier condition becomes true
10)learned about class binding to apply the class based on condition
11)i have also learned how communicate with the child component using inputs like we can use the child component as an html element in the parent template and in that we can pass the data in it and in the child component we have to use @Input() directive in order to use the data passed from the parent component and finally using it in the template file


Day 7 : (07/05/25)

1)in the morning i have started learning @Output directives which is used for allowing parent component to use the data or event of the child component in short it is used for sending data or event from the child component to parent component but with this we have to use EventEmitter to make it act as a event and in the parent component we have to use that property or event of child inside the () binding
2) after that learned how to create a service using ng generate service <name of the service> and also learned how to use that service inside other components by taking any property name with that the name of the service inside constructor and the other way is using inject outside the constructor function
3)also learned about how to seperate business logic and the displaying logic for business logic always use a service file and keep displaying logic inside the component
4) learned how to create a json server by using npm install json-server and also installed dependencies using npm install and after that created a file name db.json and then added some json code and after that run the server using npx json-server db.json
Note : is the api server is what we actally use and if yes then how to store the data in that
5) by mistakenly i deleted some of the dependencies which causes errors in the code

Day 8 : (08/05/25)

1) in the morning i tried to solve those errors which was occured yesterday and finally after some tries i solved the errors
2) after that started learning about what is observables
3) after that stored all the product details inside the db.json file inside the json server which i created yesterday
4) after that leanered how to use the get request using observables and httpclient service and finally get all the data by calling the api(here i got stuck for more than one hour because i was trying the method which is shown in tutorials but after that i asked tohid bhai for help and he told me not to use that method and finally he showed me other way and finally i got the concept ) (Note: First, start the json-server. Then, use HttpClient in your Angular service to make HTTP GET requests. Use an Observable to fetch data, and configure your app to provide HttpClient using provideHttpClient() in app.config.ts. and then subscribe the observable method inside the ngoninit method )
5) by this i have also learned about the lifecycle hook ngOnInit() which gets first executed when the angular create the component and injected the dependencies
6) also used post method to send the data inside the json for that i first used HttpClient service because of that i was able to create the property which is using the HttpClient service by that i used that property and the post method in which i have given the url and then the data which i want to post in my case added those products which
 user has clicked the button buy and that i push in the json server but for that i need to subscribe it then only it will get executed

Day 9 : (09/05/25)

1) in morning sameer sir called me in his office and we were watching all of the issues i mean the changes in the ui they want from riyaz bhai
2) after that started with the tutorials 
3) after lunch again we were tracking what changes to be done in the ui


Day 10 : (12/05/25)

1) in the morning solved all issues regarding the get and post methods.
2) created a cart component to display the items that the user wants to buy 
3) also applied the reduce method in order to show the total price of the items
4) started watching routing
5) tried to apply it but because of the version issue cant be able to do that but given my 100% to solve but nothing happened 
6) after that asked tohid bhai for help and then he helped me and finally it is solved
7) also I learned that redirectTo is used to redirect routing to a specified path. To make the redirection work correctly, we also need to specify pathMatch as either 'full' or 'prefix'
8) also used routerLink directive to navigate to a specific component when an anchor tag is clicked.
9) also learned about the Router, it is a service in Angular that is used to navigate to a specified path programmatically, such as when a button is clicked.
10) also tried defining and accessing parameters but having some issues regarding that will try tommorow to solve it or else will ask tohid bhai

Day 11 : (13/05/25)

1) revised yesterday's concept 
2) learned how to use ActivatedRoute in order to access the params from the url so that we can use it in our display logic to display data based on the params given and how we use it but this us done using that activated route with the .param.subscribe() in our case 
3) there are two ways to access the params one is using snapshot and the other is using subscribe now here comes the use cases , whenever there is one params in a single component which is not going to change at that time use snapshot(for static) else use subscribe(for dynamic))
4) also learned how to send the parms to url there are two ways one is directly giving the :filter inside the path (called path parameter), and the another is queryParams property which we have to use it in the template file where we have used routerLink
5) also learned how to used routerLinkActive directive in order to apply some styling when the button or some tags route is active
6) also learned how to use [(ngModel)] for two way binding of data and also tried a small check whether the data is actually binded or not
7) written a small function for validating user to login using hardcoded value

Day 12 : (14/05/25)

1) continued with the login component in which added submit functionality using ngSubmit directive, it allows you to bind to the submit event of the form in angular 
2) created a service for the signin component which will validate user based on the harcoded value which i have given it as an array of object
3) successfully injected the service where the business logic was written into the signin component and written the display logic in it
4) also learned how to use a template variable
5) learned about the template driven form and used it in the login component like [(ngModel)], #form="ngForm", #email="ngModel" and the control properties like valid, touched
6) revised the input and output decorators

Day 13 : (15/05/25)

1) worked with different angular built-in validators such as required for the input (it is used for ensuring that there is non empty values) and also about the email validator which is used for ensuring whether the email is having a perfect syntax or not and also there are others minLength, maxlenght, min, max, requiredTrue(used with checkboxes)
2) used email and required validator in signin form
3) explored form controls and data types (by using ngModel in the input field angular automatically creates form control for that input field)
4) explored what module actually is - it is a container which contains different components, services, custom pipes, and routing
5) a module is a container which keeps the related components, services, its routings and custom pipes which is used for managing applications in organized way
6) also gone through what is routing module and how it is used to define and manage the route of the application
7) also watched what is feature module and how it is created using cli and how to import similar components inside it and then used this module inside the appmodule which is the route module of the application
8) started with the intermidiate part and in that learned diff btn template driven form and reactive form and now diving into the reactive forms
9) imported ReactiveFormsModule in the contact app inorder to use its features
10) imported and created formcontrol instances for all 4 input tags for controling and tracking the data of form input tags 
11) also wired-up the input with the components class using formControl directive it support two way data binding althrough its not same as the template driven form but yes its supports like by using formControl directive to bind the data from the class of component to the template and the input events to bind data from template to the component class 
12) also used input events to bind data from the template to the class of the component
13) i have go though the magic of controlvalueaccessor which is executed behind the scene when we use reactive form module, when we use the formControl directive and then the we write the text in the input the flow is from class to the template so what happen behind the scene is the text is written the the class property and then behimd the scene the writevalue gets executed and then the data is set in the template and when we use the input event at that time the flow is from the template to the class so here the onchange is executed behind the scene and then the value is updated in the class

Day 14 : (16/05/25) Leave

Day 15 : (19/05/25)

1) i have gone through the in memory contact service of the project where understood how to create a fake restful api using angular InMemoryDbService which is used to create an fake api using createDb method to use it in the code
2) provided the default value to the input field while editing it using the http get and linking it with the input fields
3) learned how to use formgrou, it is like a container which holds multiple formcontrols for better control over the form) 
4) learned how to submit a reactive form using ngSubmit and then the name of the function but for using it you must add type of the button to submit
5) created save functionality and edit functionality
6) created nested FormGroups for grouping multiple form controls of same type like for address we use formgroup where there are multiple form control like city, code and all
7) learned what form builder is and how to use it (it is a servive which is used with reactive forms in order to simplify the form creation by reducing the messy code)
8) learned when to use setValue and when to use patchValue method in reactive forms setValue is having a strict rule like if you want to set only a few property then it will throw error but when we want to setvalue for some formcontrol then we can use patchValue it doesnt have strict rules (key concept learned is setValue and patchValue if used for radio buttons or options and if we fetch api and there if suppose the gender is male then it will get automatically default selected radio to male because of the setValue or the patchValue method we dont need to apply manual checks in template

